import React, { useState } from 'react';
import Result from '../Result'
import db from '../firebase';

var userName ="";
const randomWords = ['absolute',
'accident',
'accustom',
'admission',
'adoption',
'advantage',
'adventure',
'advertise',
'afternoon',
'agriculture',
'airplane',
'allowance',
'although',
'altogether',
'ambition',
'ambitious',
'annoyance',
'anything',
'anywhere',
'appearance',
'applause',
'application',
'artificial',
'association',
'astonish',
'attention',
'attentive',
'attraction',
'attractive',
'audience',
'avoidance',
'backward',
'behavior',
'boundary',
'breakfast',
'brighten',
'broadcast',
'business',
'businesslike',
'businessman',
'calculate',
'calculation',
'calculator',
'carriage',
'cautious',
'ceremony',
'certainty',
'chairman',
'character',
'childhood',
'christmas',
'circular',
'civilize',
'classification',
'classify',
'collection',
'collector',
'commerce',
'commercial',
'committee',
'companion',
'companionship',
'comparison',
'competition',
'competitor',
'complain',
'complaint',
'complete',
'completion',
'complicate',
'complication',
'composition',
'condition',
'confession',
'confidence',
'confident',
'confidential',
'confusion',
'congratulate',
'congratulation',
'connection',
'conqueror',
'conquest',
'conscience',
'conscious',
'consider',
'continue',
'convenience',
'convenient',
'conversation',
'correction',
'cowardice',
'creature',
'criminal',
'cultivate',
'cultivation',
'cultivator',
'cupboard',
'customary',
'customer',
'daughter',
'daylight',
'decision',
'decisive',
'decrease',
'defendant',
'delicate',
'delivery',
'department',
'dependence',
'dependent',
'descendant',
'describe',
'description',
'destruction',
'destructive',
'determine',
'dictionary',
'difference',
'different',
'difficult',
'difficulty',
'direction',
'director',
'disagree',
'disappear',
'disappearance',
'disappoint',
'disapprove',
'discipline',
'discomfort',
'discontent',
'discover',
'discovery',
'discussion',
'disregard',
'disrespect',
'dissatisfaction',
'dissatisfy',
'distance',
'distinguish',
'district',
'division',
'education',
'educator',
'effective',
'efficiency',
'efficient',
'election',
'electric',
'electrician',
'elephant',
'elsewhere',
'employee',
'enclosure',
'encourage',
'engineer',
'entertain',
'entrance',
'envelope',
'especially',
'essential',
'everlasting',
'everybody',
'everyday',
'everyone',
'everything',
'everywhere',
'excellence',
'excellent',
'exception',
'excessive',
'exchange',
'exercise',
'existence',
'expensive',
'experience',
'experiment',
'explosion',
'explosive',
'expression',
'extension',
'extensive',
'extraordinary',
'familiar',
'favorite',
'fellowship',
'fortunate',
'framework',
'frequency',
'frequent',
'friendly',
'friendship',
'frighten',
'furniture',
'generous',
'gentleman',
'governor',
'grammatical',
'grateful',
'handkerchief',
'handshake',
'handwriting',
'headache',
'headdress',
'heavenly',
'heighten',
'hesitate',
'hesitation',
'hindrance',
'homecoming',
'homemade',
'homework',
'horizontal',
'hospital',
'imaginary',
'imaginative',
'imitation',
'immediate',
'importance',
'important',
'impossible',
'inclusive',
'increase',
'industry',
'influence',
'influential',
'instrument',
'insurance',
'intention',
'interest',
'interfere',
'interference',
'international',
'interrupt',
'interruption',
'introduce',
'introduction',
'invention',
'inventor',
'jealousy',
'knowledge',
'landlord',
'language',
'laughter',
'leadership',
'lengthen',
'librarian',
'lipstick',
'literary',
'literature',
'machinery',
'manufacture',
'marriage',
'material',
'meantime',
'meanwhile',
'mechanic',
'mechanism',
'medicine',
'membership',
'merchant',
'messenger',
'minister',
'miserable',
'moderate',
'moderation',
'momentary',
'moonlight',
'moreover',
'motherhood',
'motherly',
'mountain',
'multiplication',
'multiply',
'musician',
'necessary',
'necessity',
'neighbor',
'neighborhood',
'newspaper',
'northern',
'notebook',
'nowadays',
'nuisance',
'numerous',
'obedience',
'obedient',
'objection',
'occasion',
'official',
'old-fashioned',
'omission',
'operation',
'operator',
'opportunity',
'opposite',
'opposition',
'ordinary',
'organize',
'ornament',
'otherwise',
'overcome',
'overflow',
'ownership',
'particle',
'particular',
'passenger',
'patience',
'patriotic',
'peculiar',
'perfection',
'performance',
'permanent',
'permission',
'persuade',
'persuasion',
'photograph',
'photography',
'pleasant',
'pleasure',
'political',
'politician',
'politics',
'population',
'position',
'possession',
'possessor',
'possible',
'postpone',
'practical',
'practice',
'precious',
'preference',
'prejudice',
'presence',
'preserve',
'president',
'pressure',
'pretense',
'prevention',
'probable',
'procession',
'production',
'profession',
'progress',
'pronounce',
'pronunciation',
'property',
'proposal',
'protection',
'punctual',
'qualification',
'quantity',
'question',
'railroad',
'reasonable',
'recognition',
'recognize',
'recommend',
'reduction',
'reference',
'reflection',
'relation',
'relative',
'religion',
'remember',
'repetition',
'represent',
'representative',
'reproduce',
'reproduction',
'republic',
'reputation',
'resistance',
'responsible',
'restaurant',
'sacrifice',
'salesman',
'satisfaction',
'satisfactory',
'scientific',
'scientist',
'scissors',
'secretary',
'sensitive',
'sentence',
'separate',
'separation',
'shilling',
'shoulder',
'signature',
'simplicity',
'situation',
'slippery',
'solution',
'somebody',
'something',
'sometime',
'sometimes',
'somewhere',
'splendid',
'standard',
'stocking',
'straight',
'straighten',
'strength',
'strengthen',
'struggle',
'substance',
'suggestion',
'surprise',
'surround',
'suspicion',
'suspicious',
'sympathetic',
'sympathy',
'telegraph',
'telephone',
'temperature',
'terrible',
'theatrical',
'therefore',
'thorough',
'threaten',
'together',
'tomorrow',
'translate',
'translation',
'translator',
'treasure',
'treasury',
'umbrella',
'underneath',
'understand',
'universal',
'universe',
'university',
'uppermost',
'valuable',
'violence',
'whatever',
'whenever',
'wherever',
'whichever',
'yesterday'];

const alphabet = [...'abcdefghijklmnopqrstuvwxyz'].map((letter) => ({
    letter,
    clicked: false,
}));

const Game = ({ username, onBackClick }) => {
    //generate random word and store in the state
    userName=username;
    const [randomWord, setRandomWord] = useState(() => {
        const randomIndex = Math.floor(Math.random() * randomWords.length);
        return randomWords[randomIndex];
    });

    //letters
    const [clickedLetters, setClickedLetters] = useState(alphabet);

    //wordState with null values
    const [wordState, setWordState] = useState(
        Array(randomWord.length).fill(null)
    );
    
    //keep track of no.of guesses
    const [guesses, setGuesses] = useState(0);
    
    //keep track if user guessed the word coorectly
    const [isCorrectGuess, setIsCorrectGuess] = useState(false);

    const [score, setScore] = useState(1000);

    function handleLetterClick(letter) {
        const newClickedLetters = clickedLetters.map((l) =>
            l.letter === letter ? { ...l, clicked: true } : l
        );
        setClickedLetters(newClickedLetters);
    
        const newWordState = [...wordState];
        let correctGuess = false;
        for (let i = 0; i < randomWord.length; i++) {
            if (randomWord[i] === letter) {
                newWordState[i] = letter;
                correctGuess = true;
            }
        }
        setWordState(newWordState);
    
        if (!correctGuess) {
          setScore((prevScore) => prevScore - 100);
            setGuesses(guesses + 1);
        } else if (!newWordState.includes(null)) {
            setIsCorrectGuess(true);
        }
    }
    
    if(isCorrectGuess ||guesses >= 6){
        return(
            <Result isCorrectGuess={isCorrectGuess} randomWord={randomWord} score={score} user = {userName}/>
        )

    }
    return (
        <div>
            <h1>Hello, {username}!</h1>
            <p>Guess the word:</p>
            <p>Score: {score}</p>
            <p>
                {wordState.map((letter, index) => (
                    <span key={index} className="letter">
                        {letter ? `${letter} ` : '_ '}
                    </span>
                ))}
            </p>
            <div>
                {clickedLetters.map((letterObj) => (
                    <button
                        key={letterObj.letter}
                        disabled={letterObj.clicked || guesses >= 6 || isCorrectGuess}
                        onClick={() => handleLetterClick(letterObj.letter)}
                    >
                        {letterObj.letter}
                    </button>
                ))}
            </div>
            <button onClick={onBackClick}>Back</button>
        </div>
    );
    
};

export default Game;
